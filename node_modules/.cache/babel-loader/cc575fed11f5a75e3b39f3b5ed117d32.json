{"ast":null,"code":"export const BASE_URL = \"https://fitnesstrac-kr.herokuapp.com/api\";\nexport const fetchRoutines = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/routines`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error retrieving routines ${error}`);\n  }\n};\nexport const fetchMyRoutines = async username => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${username}/routines`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error retrieving my routines ${error}`);\n  }\n};\nexport const fetchActivities = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/activities`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error retrieving activities ${error}`);\n  }\n};\nexport const fetchActivitiesId = async activityId => {\n  try {\n    const response = await fetch(`${BASE_URL}/activities/${activityId}/routines`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error fetching routine Id ${error}`);\n  }\n};\nexport const addActivities = async (name, description) => {\n  try {\n    const response = await fetch(`${BASE_URL}/activities`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: name,\n        description: description\n      })\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error adding an activity ${error}`);\n  }\n};\nexport const addRoutines = async (localSourcedToken, name, goal, isPublic) => {\n  try {\n    const response = await fetch(`${BASE_URL}/routines`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localSourcedToken}`\n      },\n      body: JSON.stringify({\n        name: name,\n        goal: goal,\n        isPublic: isPublic\n      })\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error adding routines ${error}`);\n  }\n};\nexport const addRoutineActivities = async (localSourcedToken, routineId, activity, count, duration) => {\n  try {\n    const response = await fetch(`${BASE_URL}/routines/${routineId}/activities`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localSourcedToken}`\n      },\n      body: JSON.stringify({\n        activityId: activity,\n        count: count,\n        duration: duration\n      })\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error retrieving routine Id ${error}`);\n  }\n};\nexport const updateRoutines = async (localSourcedToken, name, goal, isPublic, routineId) => {\n  try {\n    const response = await fetch(`${BASE_URL}/routines/${routineId}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localSourcedToken}`\n      },\n      body: JSON.stringify({\n        name: name,\n        goal: goal,\n        isPublic: isPublic\n      })\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error updating routines ${error}`);\n  }\n};\nexport const updateActivities = async (name, description, activityId) => {\n  try {\n    const response = await fetch(`${BASE_URL}/posts/${activityId}`, {\n      method: \"PATCH\",\n      body: JSON.stringify({\n        name: name,\n        description: description\n      })\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error updating activities ${error}`);\n  }\n};\nexport const updateRoutineActivities = async (localSourcedToken, routineActivityId, count, duration) => {\n  try {\n    const response = await fetch(`${BASE_URL}/routine_activities/${routineActivityId}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localSourcedToken}`\n      },\n      body: JSON.stringify({\n        count: count,\n        duration: duration\n      })\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error updating routine activity ${error}`);\n  }\n};\nexport const deleteRoutineActivities = async (token, routineActivityId) => {\n  try {\n    const response = await fetch(`${BASE_URL}/routine_activities/${routineActivityId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error deleting a routine activity ${error}`);\n  }\n};\nexport const deleteRoutines = async (routine_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/routines/${routine_id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error deleting a routine ${error}`);\n  }\n};\nexport const login = async (username, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error loging in a user ${error}`);\n  }\n};\nexport const register = async (username, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error registering a user ${error}`);\n  }\n};\nexport const userInfo = async token => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/me`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error retrieving user information ${error}`); // throw error;\n  }\n};","map":{"version":3,"sources":["/Users/carmenyap/test-site/Main_UNIV_FitnessTrackr_FrontEnd/src/api/index.js"],"names":["BASE_URL","fetchRoutines","response","fetch","headers","info","json","error","console","fetchMyRoutines","username","fetchActivities","fetchActivitiesId","activityId","addActivities","name","description","method","body","JSON","stringify","addRoutines","localSourcedToken","goal","isPublic","Authorization","addRoutineActivities","routineId","activity","count","duration","updateRoutines","updateActivities","updateRoutineActivities","routineActivityId","deleteRoutineActivities","token","deleteRoutines","routine_id","login","password","register","userInfo"],"mappings":"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","sourcesContent":["export const BASE_URL = \"https://fitnesstrac-kr.herokuapp.com/api\";\n\nexport const fetchRoutines = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/routines`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error retrieving routines ${error}`);\n  }\n};\n\nexport const fetchMyRoutines = async (username) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${username}/routines`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error retrieving my routines ${error}`);\n  }\n};\n\nexport const fetchActivities = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/activities`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error retrieving activities ${error}`);\n  }\n};\n\nexport const fetchActivitiesId = async (activityId) => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/activities/${activityId}/routines`,\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    const info = await response.json();\n\n    return info;\n  } catch (error) {\n    console.error(`Error fetching routine Id ${error}`);\n  }\n};\n\nexport const addActivities = async (name, description) => {\n  try {\n    const response = await fetch(`${BASE_URL}/activities`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: name,\n        description: description,\n      }),\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error adding an activity ${error}`);\n  }\n};\n\nexport const addRoutines = async (localSourcedToken, name, goal, isPublic) => {\n  try {\n    const response = await fetch(`${BASE_URL}/routines`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localSourcedToken}`,\n      },\n\n      body: JSON.stringify({\n        name: name,\n        goal: goal,\n        isPublic: isPublic,\n      }),\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error adding routines ${error}`);\n  }\n};\n\nexport const addRoutineActivities = async (\n  localSourcedToken,\n  routineId,\n  activity,\n  count,\n  duration\n) => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/routines/${routineId}/activities`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localSourcedToken}`,\n        },\n        body: JSON.stringify({\n          activityId: activity,\n          count: count,\n          duration: duration,\n        }),\n      }\n    );\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error retrieving routine Id ${error}`);\n  }\n};\n\nexport const updateRoutines = async (\n  localSourcedToken,\n  name,\n  goal,\n  isPublic,\n  routineId\n) => {\n  try {\n    const response = await fetch(`${BASE_URL}/routines/${routineId}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localSourcedToken}`,\n      },\n      body: JSON.stringify({\n        name: name,\n        goal: goal,\n        isPublic: isPublic,\n      }),\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error updating routines ${error}`);\n  }\n};\n\nexport const updateActivities = async (name, description, activityId) => {\n  try {\n    const response = await fetch(`${BASE_URL}/posts/${activityId}`, {\n      method: \"PATCH\",\n      body: JSON.stringify({\n        name: name,\n        description: description,\n      }),\n    });\n    const info = await response.json();\n\n    return info;\n  } catch (error) {\n    console.error(`Error updating activities ${error}`);\n  }\n};\n\nexport const updateRoutineActivities = async (\n  localSourcedToken,\n  routineActivityId,\n  count,\n  duration\n) => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/routine_activities/${routineActivityId}`,\n      {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localSourcedToken}`,\n        },\n        body: JSON.stringify({\n          count: count,\n          duration: duration,\n        }),\n      }\n    );\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error updating routine activity ${error}`);\n  }\n};\n\nexport const deleteRoutineActivities = async (token, routineActivityId) => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/routine_activities/${routineActivityId}`,\n      {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    const info = await response.json();\n\n    return info;\n  } catch (error) {\n    console.error(`Error deleting a routine activity ${error}`);\n  }\n};\n\nexport const deleteRoutines = async (routine_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/routines/${routine_id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const info = await response.json();\n\n    return info;\n  } catch (error) {\n    console.error(`Error deleting a routine ${error}`);\n  }\n};\n\nexport const login = async (username, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username,\n        password,\n      }),\n    });\n\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error loging in a user ${error}`);\n  }\n};\n\nexport const register = async (username, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username,\n        password,\n      }),\n    });\n\n    const info = await response.json();\n\n    return info;\n  } catch (error) {\n    console.error(`Error registering a user ${error}`);\n  }\n};\n\nexport const userInfo = async (token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/me`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const info = await response.json();\n\n    return info;\n  } catch (error) {\n    console.error(`Error retrieving user information ${error}`);\n    // throw error;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}