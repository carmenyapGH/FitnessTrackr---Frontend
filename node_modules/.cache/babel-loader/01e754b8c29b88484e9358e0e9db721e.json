{"ast":null,"code":"export const BASE_URL = \"https://fitnesstrac-kr.herokuapp.com/api/\";\nexport const fetchPosts = async token => {\n  try {\n    // const response = await fetch(`${BASE_URL}/posts`);\n    const response = token ? await fetch(`${BASE_URL}/posts`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }) : await fetch(`${BASE_URL}/posts`); // const data = await response.json();\n    // return data;\n\n    const {\n      data: {\n        posts\n      }\n    } = await response.json();\n    return posts;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const login = async (username, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user: {\n          username,\n          password\n        }\n      })\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const register = async (username, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user: {\n          username,\n          password\n        }\n      })\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error registering a user ${error}`);\n  }\n};\nexport const userInfo = async token => {\n  try {\n    const userResponse = await fetch(`${BASE_URL}/users/me`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const info = await userResponse.json();\n    return info;\n  } catch (error) {\n    console.error(`Error retrieving user information ${error}`); // throw error;\n  }\n};","map":{"version":3,"sources":["/Users/carmenyap/test-site/UNIV Web - FitnessTrackr_React Front-End/src/api/index.js"],"names":["BASE_URL","fetchPosts","token","response","fetch","headers","Authorization","data","posts","json","error","console","login","username","password","method","body","JSON","stringify","user","info","register","userInfo","userResponse"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,2CAAjB;AAEP,OAAO,MAAMC,UAAU,GAAG,MAAOC,KAAP,IAAiB;AACzC,MAAI;AACF;AACA,UAAMC,QAAQ,GAAGD,KAAK,GAClB,MAAME,KAAK,CAAE,GAAEJ,QAAS,QAAb,EAAsB;AAC/BK,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASJ,KAAM;AAAjC;AADsB,KAAtB,CADO,GAIlB,MAAME,KAAK,CAAE,GAAEJ,QAAS,QAAb,CAJf,CAFE,CAQF;AACA;;AAEA,UAAM;AACJO,MAAAA,IAAI,EAAE;AAAEC,QAAAA;AAAF;AADF,QAEF,MAAML,QAAQ,CAACM,IAAT,EAFV;AAIA,WAAOD,KAAP;AACD,GAhBD,CAgBE,OAAOE,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,CApBM;AAsBP,OAAO,MAAME,KAAK,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACjD,MAAI;AACF,UAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,cAAb,EAA4B;AACtDe,MAAAA,MAAM,EAAE,MAD8C;AAEtDV,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF6C;AAKtDW,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,IAAI,EAAE;AACJN,UAAAA,QADI;AAEJC,UAAAA;AAFI;AADa,OAAf;AALgD,KAA5B,CAA5B;AAaA,UAAMM,IAAI,GAAG,MAAMjB,QAAQ,CAACM,IAAT,EAAnB;AACA,WAAOW,IAAP;AACD,GAhBD,CAgBE,OAAOV,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,CApBM;AAsBP,OAAO,MAAMW,QAAQ,GAAG,OAAOR,QAAP,EAAiBC,QAAjB,KAA8B;AACpD,MAAI;AACF,UAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,iBAAb,EAA+B;AACzDe,MAAAA,MAAM,EAAE,MADiD;AAEzDV,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFgD;AAKzDW,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,IAAI,EAAE;AACJN,UAAAA,QADI;AAEJC,UAAAA;AAFI;AADa,OAAf;AALmD,KAA/B,CAA5B;AAaA,UAAMM,IAAI,GAAG,MAAMjB,QAAQ,CAACM,IAAT,EAAnB;AAEA,WAAOW,IAAP;AACD,GAjBD,CAiBE,OAAOV,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAe,4BAA2BA,KAAM,EAAhD;AACD;AACF,CArBM;AAuBP,OAAO,MAAMY,QAAQ,GAAG,MAAOpB,KAAP,IAAiB;AACvC,MAAI;AACF,UAAMqB,YAAY,GAAG,MAAMnB,KAAK,CAAE,GAAEJ,QAAS,WAAb,EAAyB;AACvDK,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAG,UAASJ,KAAM;AAFxB;AAD8C,KAAzB,CAAhC;AAMA,UAAMkB,IAAI,GAAG,MAAMG,YAAY,CAACd,IAAb,EAAnB;AAEA,WAAOW,IAAP;AACD,GAVD,CAUE,OAAOV,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAe,qCAAoCA,KAAM,EAAzD,EADc,CAEd;AACD;AACF,CAfM","sourcesContent":["export const BASE_URL = \"https://fitnesstrac-kr.herokuapp.com/api/\";\n\nexport const fetchPosts = async (token) => {\n  try {\n    // const response = await fetch(`${BASE_URL}/posts`);\n    const response = token\n      ? await fetch(`${BASE_URL}/posts`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n      : await fetch(`${BASE_URL}/posts`);\n\n    // const data = await response.json();\n    // return data;\n\n    const {\n      data: { posts },\n    } = await response.json();\n\n    return posts;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const login = async (username, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user: {\n          username,\n          password,\n        },\n      }),\n    });\n\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const register = async (username, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user: {\n          username,\n          password,\n        },\n      }),\n    });\n\n    const info = await response.json();\n\n    return info;\n  } catch (error) {\n    console.error(`Error registering a user ${error}`);\n  }\n};\n\nexport const userInfo = async (token) => {\n  try {\n    const userResponse = await fetch(`${BASE_URL}/users/me`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const info = await userResponse.json();\n\n    return info;\n  } catch (error) {\n    console.error(`Error retrieving user information ${error}`);\n    // throw error;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}