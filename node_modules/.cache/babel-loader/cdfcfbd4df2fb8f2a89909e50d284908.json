{"ast":null,"code":"export const BASE_URL = \"https://fitnesstrac-kr.herokuapp.com/api\";\nexport const fetchRoutines = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/routines`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const {\n      data: {\n        posts\n      }\n    } = await response.json();\n    return posts;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const AddRoutines = async (name, goal, isPublic) => {\n  try {\n    const response = await fetch(`${BASE_URL}/routines`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: name,\n        goal: goal,\n        isPublic: isPublic\n      })\n    });\n    const {\n      data: {\n        posts\n      }\n    } = await response.json();\n    return posts;\n  } catch (error) {\n    console.error(error);\n  }\n};\n_c = AddRoutines;\nexport const fetchMyRoutines = async username => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${username}/routines`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const {\n      data: {\n        posts\n      }\n    } = await response.json();\n    return posts;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const fetchActivities = async () => {\n  try {\n    const userResponse = await fetch(`${BASE_URL}/activities`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const info = await userResponse.json();\n    return info;\n  } catch (error) {\n    console.error(`Error retrieving activities ${error}`); // throw error;\n  }\n};\nexport const fetchActivitiesId = async activityId => {\n  try {\n    const response = await fetch(`${BASE_URL}/activities/${activityId}/routines`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const {\n      data: {\n        posts\n      }\n    } = await response.json();\n    return posts;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const addActivities = async (name, description) => {\n  try {\n    const response = await fetch(`${BASE_URL}/activities`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: name,\n        description: description\n      })\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const addRoutineActivities = async (routineId, activityId, count, duration) => {\n  try {\n    const response = await fetch(`${BASE_URL}/routines${routineId}/activities`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        activityId: activityId,\n        count: count,\n        duration: duration\n      })\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const updateRoutines = async (name, goal, isPublic) => {\n  try {\n    const response = await fetch(`${BASE_URL}/routines/${routineId}`, {\n      method: \"PATCH\",\n      body: JSON.stringify({\n        name: name,\n        goal: goal\n      })\n    });\n    const info = await response.json();\n    return info;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const updateActivities = async (name, description, activityId) => {\n  try {\n    const response = await fetch(`${BASE_URL}/posts/${activityId}`, {\n      method: \"PATCH\",\n      body: JSON.stringify({\n        name: name,\n        description: description\n      })\n    });\n    const info = await response.json();\n    return info;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const updateRoutineActivities = async (routineId, count, duration) => {\n  try {\n    const response = await fetch(`${BASE_URL}/posts/${activityId}`, {\n      method: \"PATCH\",\n      body: JSON.stringify({\n        count: count,\n        duration: duration\n      })\n    });\n    const info = await response.json();\n    return info;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const deleteRoutinesActivities = async (routine_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/routine_activities/${routine_id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const info = await response.json();\n    return info;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const deleteRoutines = async (routine_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/routines/${routine_id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const info = await response.json();\n    return info;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const login = async (username, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const register = async (username, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(`Error registering a user ${error}`);\n  }\n};\nexport const userInfo = async token => {\n  try {\n    const userResponse = await fetch(`${BASE_URL}/users/me`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const info = await userResponse.json();\n    return info;\n  } catch (error) {\n    console.error(`Error retrieving user information ${error}`); // throw error;\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AddRoutines\");","map":{"version":3,"sources":["/Users/carmenyap/test-site/UNIV Web - FitnessTrackr_React Front-End/src/api/index.js"],"names":["BASE_URL","fetchRoutines","response","fetch","headers","data","posts","json","error","console","AddRoutines","name","goal","isPublic","method","body","JSON","stringify","fetchMyRoutines","username","fetchActivities","userResponse","info","fetchActivitiesId","activityId","addActivities","description","addRoutineActivities","routineId","count","duration","updateRoutines","err","log","updateActivities","updateRoutineActivities","deleteRoutinesActivities","routine_id","token","Authorization","deleteRoutines","login","password","register","userInfo"],"mappings":"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","sourcesContent":["export const BASE_URL = \"https://fitnesstrac-kr.herokuapp.com/api\";\n\nexport const fetchRoutines = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/routines`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const {\n      data: { posts },\n    } = await response.json();\n\n    return posts;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const AddRoutines = async (name, goal, isPublic) => {\n  try {\n    const response = await fetch(`${BASE_URL}/routines`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: name,\n        goal: goal,\n        isPublic: isPublic,\n      }),\n    });\n    const {\n      data: { posts },\n    } = await response.json();\n\n    return posts;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchMyRoutines = async (username) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${username}/routines`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const {\n      data: { posts },\n    } = await response.json();\n\n    return posts;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchActivities = async () => {\n  try {\n    const userResponse = await fetch(`${BASE_URL}/activities`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const info = await userResponse.json();\n\n    return info;\n  } catch (error) {\n    console.error(`Error retrieving activities ${error}`);\n    // throw error;\n  }\n};\n\nexport const fetchActivitiesId = async (activityId) => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/activities/${activityId}/routines`,\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    const {\n      data: { posts },\n    } = await response.json();\n\n    return posts;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const addActivities = async (name, description) => {\n  try {\n    const response = await fetch(`${BASE_URL}/activities`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: name,\n        description: description,\n      }),\n    });\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const addRoutineActivities = async (\n  routineId,\n  activityId,\n  count,\n  duration\n) => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/routines${routineId}/activities`,\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          activityId: activityId,\n          count: count,\n          duration: duration,\n        }),\n      }\n    );\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const updateRoutines = async (name, goal, isPublic) => {\n  try {\n    const response = await fetch(`${BASE_URL}/routines/${routineId}`, {\n      method: \"PATCH\",\n      body: JSON.stringify({\n        name: name,\n        goal: goal,\n      }),\n    });\n    const info = await response.json();\n\n    return info;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const updateActivities = async (name, description, activityId) => {\n  try {\n    const response = await fetch(`${BASE_URL}/posts/${activityId}`, {\n      method: \"PATCH\",\n      body: JSON.stringify({\n        name: name,\n        description: description,\n      }),\n    });\n    const info = await response.json();\n\n    return info;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const updateRoutineActivities = async (routineId, count, duration) => {\n  try {\n    const response = await fetch(`${BASE_URL}/posts/${activityId}`, {\n      method: \"PATCH\",\n      body: JSON.stringify({\n        count: count,\n        duration: duration,\n      }),\n    });\n    const info = await response.json();\n\n    return info;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const deleteRoutinesActivities = async (routine_id, token) => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/routine_activities/${routine_id}`,\n      {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    const info = await response.json();\n\n    return info;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const deleteRoutines = async (routine_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/routines/${routine_id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const info = await response.json();\n\n    return info;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const login = async (username, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username,\n        password,\n      }),\n    });\n\n    const info = await response.json();\n    return info;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const register = async (username, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username,\n        password,\n      }),\n    });\n\n    const info = await response.json();\n\n    return info;\n  } catch (error) {\n    console.error(`Error registering a user ${error}`);\n  }\n};\n\nexport const userInfo = async (token) => {\n  try {\n    const userResponse = await fetch(`${BASE_URL}/users/me`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const info = await userResponse.json();\n\n    return info;\n  } catch (error) {\n    console.error(`Error retrieving user information ${error}`);\n    // throw error;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}