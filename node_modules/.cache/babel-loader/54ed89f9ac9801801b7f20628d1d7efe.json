{"ast":null,"code":"var _jsxFileName = \"/Users/carmenyap/test-site/UNIV Web - FitnessTrackr_React Front-End/src/Components/Update.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useNavigate } from \"react-router-dom\";\nimport { updatePost, fetchPosts } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Update = _ref => {\n  _s();\n\n  let {\n    setPosts,\n    posts,\n    setUserdata,\n    userdata\n  } = _ref;\n  const [titles, setTitles] = useState(\"\");\n  const [descriptions, setDescriptions] = useState(\"\");\n  const [prices, setPrices] = useState(\"\");\n  const [locations, setLocations] = useState(\"\");\n  const [willDelivers, setWillDelivers] = useState(\"\");\n  const history = useNavigate();\n  const params = useParams();\n  const post_id = params.id;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const localSourcedToken = localStorage.getItem(\"token\");\n    console.log(willDelivers);\n    const response = await updatePost(localSourcedToken, titles, descriptions, prices, locations, willDelivers, post_id);\n\n    if (response.success) {\n      fetchPosts().then(posts => {\n        setPosts(posts);\n      });\n      history(\"/posts\");\n    }\n  };\n\n  const checkboxToggle = () => {\n    document.getElementById(\"controlledCheckbox\").checked = willDelivers;\n  }; // useEffect(() => {\n  //   // checkboxToggle();\n  // }, [willDelivers]);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: posts && posts.filter(post => {\n      if (userdata && userdata._id) {\n        return post._id === post_id;\n      }\n\n      return false;\n    }).map(_ref2 => {\n      let {\n        title,\n        description,\n        price,\n        location,\n        willDeliver\n      } = _ref2;\n      if (!titles) setTitles(title);\n      if (!descriptions) setDescriptions(description);\n      if (!prices) setPrices(price);\n      if (!locations) setLocations(location);\n      if (willDeliver === null) setWillDelivers(willDeliver); // setWillDelivers(willDeliver);\n\n      return /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"update-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"update-form-grp\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: titles,\n            id: \"title_input\",\n            onChange: event => setTitles(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"update-form-grp\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            type: \"text\",\n            value: descriptions,\n            row: \"5\",\n            id: \"description_input\",\n            onChange: event => setDescriptions(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"update-form-grp\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: prices,\n            id: \"price_input\",\n            onChange: event => {\n              setPrices(event.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"update-form-grp\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: locations,\n            id: \"location_input\",\n            onChange: event => setLocations(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"update-form-grp\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"update-form-grp-cbox\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"controlledCheckbox\",\n              type: \"checkbox\",\n              checked: willDelivers,\n              onChange: event => setWillDelivers(event.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Will Deliver?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Update Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 17\n        }, this)]\n      }, \"_id\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Update, \"b0R54ef0JDPwJcml3V+aXAOkHig=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = Update;\nexport default Update;\n\nvar _c;\n\n$RefreshReg$(_c, \"Update\");","map":{"version":3,"sources":["/Users/carmenyap/test-site/UNIV Web - FitnessTrackr_React Front-End/src/Components/Update.js"],"names":["useState","useEffect","useParams","useNavigate","updatePost","fetchPosts","Update","setPosts","posts","setUserdata","userdata","titles","setTitles","descriptions","setDescriptions","prices","setPrices","locations","setLocations","willDelivers","setWillDelivers","history","params","post_id","id","handleSubmit","event","preventDefault","localSourcedToken","localStorage","getItem","console","log","response","success","then","checkboxToggle","document","getElementById","checked","filter","post","_id","map","title","description","price","location","willDeliver","target","value"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useNavigate } from \"react-router-dom\";\nimport { updatePost, fetchPosts } from \"../api\";\n\nconst Update = ({ setPosts, posts, setUserdata, userdata }) => {\n  const [titles, setTitles] = useState(\"\");\n  const [descriptions, setDescriptions] = useState(\"\");\n  const [prices, setPrices] = useState(\"\");\n  const [locations, setLocations] = useState(\"\");\n  const [willDelivers, setWillDelivers] = useState(\"\");\n  const history = useNavigate();\n  const params = useParams();\n  const post_id = params.id;\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const localSourcedToken = localStorage.getItem(\"token\");\n    console.log(willDelivers);\n\n    const response = await updatePost(\n      localSourcedToken,\n      titles,\n      descriptions,\n      prices,\n      locations,\n      willDelivers,\n      post_id\n    );\n\n    if (response.success) {\n      fetchPosts().then((posts) => {\n        setPosts(posts);\n      });\n      history(\"/posts\");\n    }\n  };\n\n  const checkboxToggle = () => {\n    document.getElementById(\"controlledCheckbox\").checked = willDelivers;\n  };\n\n  // useEffect(() => {\n  //   // checkboxToggle();\n  // }, [willDelivers]);\n\n  return (\n    <div>\n      {posts &&\n        posts\n          .filter((post) => {\n            if (userdata && userdata._id) {\n              return post._id === post_id;\n            }\n            return false;\n          })\n\n          .map(({ title, description, price, location, willDeliver }) => {\n            if (!titles) setTitles(title);\n            if (!descriptions) setDescriptions(description);\n            if (!prices) setPrices(price);\n            if (!locations) setLocations(location);\n            if (willDeliver === null) setWillDelivers(willDeliver);\n            // setWillDelivers(willDeliver);\n\n            return (\n              <form key=\"_id\" onSubmit={handleSubmit} className=\"update-form\">\n                <div className=\"update-form-grp\">\n                  <label>Title</label>\n                  <input\n                    type=\"text\"\n                    value={titles}\n                    id=\"title_input\"\n                    onChange={(event) => setTitles(event.target.value)}\n                  />\n                </div>\n\n                <div className=\"update-form-grp\">\n                  <label>Description</label>\n                  <textarea\n                    type=\"text\"\n                    value={descriptions}\n                    row=\"5\"\n                    id=\"description_input\"\n                    onChange={(event) => setDescriptions(event.target.value)}\n                  />\n                </div>\n\n                <div className=\"update-form-grp\">\n                  <label>Price</label>\n                  <input\n                    type=\"text\"\n                    value={prices}\n                    id=\"price_input\"\n                    onChange={(event) => {\n                      setPrices(event.target.value);\n                    }}\n                  />\n                </div>\n\n                <div className=\"update-form-grp\">\n                  <label>Location</label>\n                  <input\n                    type=\"text\"\n                    value={locations}\n                    id=\"location_input\"\n                    onChange={(event) => setLocations(event.target.value)}\n                  />\n                </div>\n\n                <div className=\"update-form-grp\">\n                  <div className=\"update-form-grp-cbox\">\n                    <input\n                      id=\"controlledCheckbox\"\n                      type=\"checkbox\"\n                      checked={willDelivers}\n                      onChange={(event) =>\n                        setWillDelivers(event.target.checked)\n                      }\n                    />\n\n                    <span>Will Deliver?</span>\n                  </div>\n                </div>\n\n                <button type=\"submit\">Update Post</button>\n              </form>\n            );\n          })}\n    </div>\n  );\n};\n\nexport default Update;\n"]},"metadata":{},"sourceType":"module"}